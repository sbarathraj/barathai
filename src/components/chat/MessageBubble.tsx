import React from 'react';
import { MarkdownRenderer } from '@/components/MarkdownRenderer';
import { TextToSpeech } from '@/components/TextToSpeech';
import { Copy, Download, Image as ImageIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

interface MessageBubbleProps {
  message: {
    id: string;
    content: string;
    role: 'user' | 'assistant';
    timestamp: Date;
  };
  isUser: boolean;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, isUser }) => {
  const { toast } = useToast();

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: "Message copied to clipboard",
      });
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  // Enhanced image detection and extraction
  const extractImageInfo = (content: string) => {
    // Look for markdown image format: ![alt](data:image/...)
    const imageRegex = /!\[([^\]]*)\]\((data:image\/[^)]+)\)/;
    const match = content.match(imageRegex);
    
    if (match) {
      return {
        imageUrl: match[2],
        altText: match[1],
        hasImage: true
      };
    }
    
    // Also check for direct base64 image URLs in content
    const base64Regex = /(data:image\/[^;\s]+;base64,[A-Za-z0-9+/=]+)/;
    const base64Match = content.match(base64Regex);
    
    if (base64Match) {
      return {
        imageUrl: base64Match[1],
        altText: 'Generated Image',
        hasImage: true
      };
    }
    
    return { hasImage: false, imageUrl: null, altText: null };
  };

  const downloadImage = (imageUrl: string) => {
    try {
      const link = document.createElement('a');
      link.href = imageUrl;
      link.download = `barathai-generated-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: "Downloaded!",
        description: "Image saved to your downloads",
      });
    } catch (error) {
      console.error('Download failed:', error);
      toast({
        title: "Download failed",
        description: "Could not download the image",
        variant: "destructive",
      });
    }
  };

  const imageInfo = extractImageInfo(message.content);
  const isImageMessage = imageInfo.hasImage;

  // Extract text content without the image markdown
  const getTextContent = (content: string) => {
    if (!imageInfo.hasImage) return content;
    
    // Remove the image markdown and clean up the remaining text
    let textContent = content
      .replace(/!\[([^\]]*)\]\((data:image\/[^)]+)\)/, '') // Remove image markdown
      .replace(/^\s*\n+/, '') // Remove leading newlines
      .replace(/\n+\s*$/, '') // Remove trailing newlines
      .trim();
    
    return textContent;
  };

  const textContent = getTextContent(message.content);

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6 animate-fade-in`}>
      <div className={`max-w-[85%] ${isUser ? 'order-2' : 'order-1'}`}>
        {!isUser && (
          <div className="flex items-center mb-2">
            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-bold mr-3 shadow-lg">
              AI
            </div>
            <span className="text-sm font-medium text-slate-600 dark:text-slate-400">BarathAI</span>
          </div>
        )}
        
        <div className={`rounded-2xl px-4 py-3 shadow-lg backdrop-blur-sm border transition-all duration-200 hover:shadow-xl ${
          isUser 
            ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white border-blue-300 dark:border-blue-600' 
            : 'bg-white/80 dark:bg-slate-800/80 text-slate-900 dark:text-white border-slate-200 dark:border-slate-700'
        }`}>
          
          {/* Display image if present */}
          {isImageMessage && imageInfo.imageUrl && (
            <div className="mb-3">
              <div className="relative group">
                <img 
                  src={imageInfo.imageUrl} 
                  alt={imageInfo.altText || "Generated by BarathAI"} 
                  className="w-full max-w-md rounded-lg shadow-md border border-slate-200 dark:border-slate-600"
                  onError={(e) => {
                    console.error('Image failed to load:', imageInfo.imageUrl);
                    const target = e.target as HTMLImageElement;
                    target.style.display = 'none';
                    
                    // Create fallback element
                    const fallback = document.createElement('div');
                    fallback.className = 'bg-slate-100 dark:bg-slate-700 rounded-lg p-6 text-center text-slate-500 border border-slate-200 dark:border-slate-600';
                    fallback.innerHTML = `
                      <div class="flex flex-col items-center space-y-2">
                        <svg class="w-12 h-12 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        <span>[IMAGE] Generated image failed to load</span>
                      </div>
                    `;
                    target.parentNode?.appendChild(fallback);
                  }}
                  onLoad={() => {
                    console.log('Image loaded successfully:', imageInfo.imageUrl?.substring(0, 50) + '...');
                  }}
                />
                
                {/* Download button overlay */}
                <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
                  <Button
                    onClick={() => downloadImage(imageInfo.imageUrl!)}
                    variant="secondary"
                    size="sm"
                    className="bg-white/90 text-black hover:bg-white shadow-lg"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Download
                  </Button>
                </div>
              </div>
            </div>
          )}
          
          {/* Display text content if present */}
          {textContent && (
            <div className="prose prose-slate dark:prose-invert max-w-none">
              <MarkdownRenderer content={textContent} />
            </div>
          )}
          
          {/* Show fallback if no image and no text */}
          {!isImageMessage && !textContent && (
            <div className="text-slate-500 dark:text-slate-400 italic">
              [Empty message]
            </div>
          )}
          
          <div className={`flex items-center justify-between mt-3 pt-2 border-t ${
            isUser ? 'border-white/20' : 'border-slate-200 dark:border-slate-600'
          }`}>
            <span className={`text-xs ${
              isUser ? 'text-white/70' : 'text-slate-500 dark:text-slate-400'
            }`}>
              {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </span>
            <div className="flex items-center space-x-2">
              {!isUser && (
                <TextToSpeech 
                  text={isImageMessage ? "Generated image" : textContent || message.content} 
                  className={isUser ? 'text-white/70 hover:text-white' : ''} 
                />
              )}
              <Button
                variant="ghost"
                size="icon"
                onClick={() => copyToClipboard(isImageMessage ? imageInfo.imageUrl! : message.content)}
                className={`h-6 w-6 transition-colors ${
                  isUser 
                    ? 'text-white/70 hover:text-white hover:bg-white/20' 
                    : 'text-slate-400 hover:text-blue-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                }`}
                title="Copy content"
              >
                <Copy size={14} />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};