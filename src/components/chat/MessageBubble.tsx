import React from 'react';
import { MarkdownRenderer } from '@/components/MarkdownRenderer';
import { TextToSpeech } from '@/components/TextToSpeech';
import { Copy, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

interface MessageBubbleProps {
  message: {
    id: string;
    content: string;
    role: 'user' | 'assistant';
    timestamp: Date;
  };
  isUser: boolean;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, isUser }) => {
  const { toast } = useToast();

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: "Message copied to clipboard",
      });
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const extractImageUrl = (content: string): string | null => {
    // Extract image URL from markdown format: ![alt](url)
    const imageRegex = /!\[.*?\]\((.*?)\)/;
    const match = content.match(imageRegex);
    return match ? match[1] : null;
  };

  const downloadImage = (imageUrl: string) => {
    const link = document.createElement('a');
    link.href = imageUrl;
    link.download = `barathai-generated-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const imageUrl = extractImageUrl(message.content);
  const isImageMessage = imageUrl && imageUrl.startsWith('data:image');

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6 animate-fade-in`}>
      <div className={`max-w-[85%] ${isUser ? 'order-2' : 'order-1'}`}>
        {!isUser && (
          <div className="flex items-center mb-2">
            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-bold mr-3 shadow-lg">
              AI
            </div>
            <span className="text-sm font-medium text-slate-600 dark:text-slate-400">BarathAI</span>
          </div>
        )}
        
        <div className={`rounded-2xl px-4 py-3 shadow-lg backdrop-blur-sm border transition-all duration-200 hover:shadow-xl ${
          isUser 
            ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white border-blue-300 dark:border-blue-600' 
            : 'bg-white/80 dark:bg-slate-800/80 text-slate-900 dark:text-white border-slate-200 dark:border-slate-700'
        }`}>
          {isImageMessage ? (
            <div className="space-y-3">
              <div className="relative group">
                <img 
                  src={imageUrl} 
                  alt="Generated by BarathAI" 
                  className="w-full max-w-md rounded-lg shadow-md"
                  onError={(e) => {
                    // Fallback to placeholder if image fails to load
                    const target = e.target as HTMLImageElement;
                    target.style.display = 'none';
                    const fallback = document.createElement('div');
                    fallback.className = 'bg-slate-100 dark:bg-slate-700 rounded-lg p-4 text-center text-slate-500';
                    fallback.textContent = '[IMAGE] Generated image (failed to load)';
                    target.parentNode?.appendChild(fallback);
                  }}
                />
                <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
                  <Button
                    onClick={() => downloadImage(imageUrl)}
                    variant="secondary"
                    size="sm"
                    className="bg-white/90 text-black hover:bg-white"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Download
                  </Button>
                </div>
              </div>
              
              {/* Extract and display the caption text */}
              {message.content.includes('*Generated image for:') && (
                <div className="text-sm text-slate-600 dark:text-slate-400 italic">
                  {message.content.split('\n\n')[1]?.replace(/\*/g, '')}
                </div>
              )}
            </div>
          ) : (
            <div className="prose prose-slate dark:prose-invert max-w-none">
              <MarkdownRenderer content={message.content} />
            </div>
          )}
          
          <div className={`flex items-center justify-between mt-3 pt-2 border-t ${
            isUser ? 'border-white/20' : 'border-slate-200 dark:border-slate-600'
          }`}>
            <span className={`text-xs ${
              isUser ? 'text-white/70' : 'text-slate-500 dark:text-slate-400'
            }`}>
              {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </span>
            <div className="flex items-center space-x-2">
              {!isUser && (
                <TextToSpeech 
                  text={isImageMessage ? "Generated image" : message.content} 
                  className={isUser ? 'text-white/70 hover:text-white' : ''} 
                />
              )}
              <Button
                variant="ghost"
                size="icon"
                onClick={() => copyToClipboard(isImageMessage ? imageUrl : message.content)}
                className={`h-6 w-6 transition-colors ${
                  isUser 
                    ? 'text-white/70 hover:text-white hover:bg-white/20' 
                    : 'text-slate-400 hover:text-blue-400 hover:bg-slate-100 dark:hover:bg-slate-700'
                }`}
                title="Copy content"
              >
                <Copy size={14} />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};